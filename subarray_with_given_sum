/*
Ques: Given an array of positive integers A and an integer B, find and return first continuous subarray which adds to B.
If the answer does not exist return an array with a single element "-1". First sub-array means the sub-array for which starting index in minimum.
Input 1:
 A = [1, 2, 3, 4, 5]                        
 B = 5
Output 1: [2, 3]

Input 2:
 A = [1, 2, 3, 4, 5]  
 B = 9
Output 1: [2, 3, 4]
 
Input 3:
 A = [5, 10, 20, 100, 105]
 B = 110
Output 3: -1
*/
//Find subarray with given sum using Sliding Window
#include <iostream>
#include <vector>
using namespace std;

int subArray(int arr[], int size, int sum)
{
	int currSum=0,start=0;
	
	for(int j=0; j<size ; j++)
	{
	    currSum = arr[start];
	    for(int i=j+1; i<size ; i++)
	    {
	        if(sum < currSum)
	        {
	            start++;
	            break;
	        }
	        currSum = currSum + arr[i];
	        if(sum == currSum)
	        {
	            cout<< "Found from Index "<<  j << " to "<< i <<endl;  
	            return 1;
	        }
	    }    
	}
	return -1;
}

int main() {
    //int arr[] = {5, 10, 20, 100, 105};
    int arr[] = {115, 100, 20, 102, 10};
    int sumFind = 120;
    int size = sizeof(arr)/sizeof(arr[0]);
    if(subArray(arr, size, sumFind))
        cout<<"Found";
    else
        cout<<"Not Found";
}
