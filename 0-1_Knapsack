#include <bits/stdc++.h>
using namespace std;

int max(int a, int b) { return (a > b) ? a : b; }

int knapSackRec(int W, int wt[], int val[], int n, int **dp) 
{ 
   //base condition
   if(W<=0 || n<0)
        return 0;
    
    //if already calculated then return from here
    if(dp[n][W] != -1 )
        return dp[n][W];
        
   if(wt[n] <= W)
   {
       dp[n][W] = max(val[n]+knapSackRec(W-wt[n], wt, val, n-1, dp), knapSackRec(W, wt, val, n-1, dp));
       return dp[n][W];
   }
   else
   {
       dp[n][W] = knapSackRec(W, wt, val, n-1, dp);
       return dp[n][W];
   }
}
    
int knapSack(int W, int wt[], int val[], int n)
{
    // double pointer to declare the 2d array dynamically
    int** dp;
    dp = new int*[n];
 
    // loop to create the 2d array dynamically
    for (int i = 0; i < n; i++)
        dp[i] = new int[W + 1];
 
    // loop to initially fill the array with -1
    for (int i = 0; i < n; i++)
        for (int j = 0; j < W + 1; j++)
            dp[i][j] = -1;
    return knapSackRec(W, wt, val, n - 1, dp);
}
    
int main()
{
	int val[] = { 60, 100, 30 };
	int wt[] = { 10, 20, 30 };
	int W = 50;
	int n = sizeof(val) / sizeof(val[0]);
	cout << knapSack(W, wt, val, n);
	return 0;
}
